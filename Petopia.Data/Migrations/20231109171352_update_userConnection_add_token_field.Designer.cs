// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Petopia.Data;

#nullable disable

namespace Petopia.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231109171352_update_userConnection_add_token_field")]
    partial class update_userConnection_add_token_field
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Petopia.Data.Entities.SyncDataCollection", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CollectionId");

                    b.ToTable("SyncDataCollection");
                });

            modelBuilder.Entity("Petopia.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("IsCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 10, 0, 13, 52, 748, DateTimeKind.Local).AddTicks(2640));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ResetPasswordTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc9085f0-2816-44e4-a1d2-eb2050ab301d"),
                            Email = "6154B051E9E3D3179DE74C08D3294698CBEA931503E638A77CE9F43FB25E2710",
                            IsCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$ZPqHXEjL.1K8ZYbRbY/jbOElxxjGpB34lyBdtzVvDVjvy2SvarzMq",
                            ResetPasswordTokenExpirationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Role = 1
                        });
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AccessTokenExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 11, 10, 0, 13, 52, 748, DateTimeKind.Unspecified).AddTicks(7660), new TimeSpan(0, 7, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 11, 10, 0, 13, 52, 748, DateTimeKind.Unspecified).AddTicks(7830), new TimeSpan(0, 7, 0, 0, 0)));

                    b.HasKey("Id");

                    b.ToTable("UserConnection", (string)null);
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserIndividualAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserIndividualAttributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc9085f0-2816-44e4-a1d2-eb2050ab301d"),
                            FirstName = "Đức Anh",
                            LastName = "Bùi"
                        });
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserOrganizationAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserOrganizationAttributes", (string)null);
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserConnection", b =>
                {
                    b.HasOne("Petopia.Data.Entities.User", "User")
                        .WithOne("UserConnection")
                        .HasForeignKey("Petopia.Data.Entities.UserConnection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserIndividualAttributes", b =>
                {
                    b.HasOne("Petopia.Data.Entities.User", "User")
                        .WithOne("UserIndividualAttributes")
                        .HasForeignKey("Petopia.Data.Entities.UserIndividualAttributes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Petopia.Data.Entities.UserOrganizationAttributes", b =>
                {
                    b.HasOne("Petopia.Data.Entities.User", "User")
                        .WithOne("UserOrganizationAttributes")
                        .HasForeignKey("Petopia.Data.Entities.UserOrganizationAttributes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Petopia.Data.Entities.User", b =>
                {
                    b.Navigation("UserConnection");

                    b.Navigation("UserIndividualAttributes");

                    b.Navigation("UserOrganizationAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
